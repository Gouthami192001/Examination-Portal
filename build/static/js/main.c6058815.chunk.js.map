{"version":3,"sources":["images/trash_bin-100_copy.jpg","images/pngwing.com (1).png","services/firebaseConfig.js","components/Form/Form.js","components/Form/FormMaker.js","components/Form/PinVerify.js","components/Form/Navbar.js","components/Form/ResultFetch.js","components/Form/DisplayPin.js","components/Form/ExamsCreated.js","components/Form/ExamsAttempted.js","components/Form/DisplayResponses.js","pages/Home.js","pages/About.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","provider","getAuth","GoogleAuthProvider","Stater","authState","setAuthState","useState","useEffect","document","querySelector","innerHTML","onAuthStateChanged","user","some","querySelectorAll","style","display","i","length","displayName","this","signInWithGoogle","signInWithPopup","then","result","credentialFromResult","catch","error","code","message","email","credentialFromError","signOutWithGoogle","signOut","window","location","e","console","log","Form","questions","setQuestions","title","setTitle","selectedList","setSelectedList","studInfo","setStudInfo","status","setStatus","pin","useParams","async","Object","keys","setDoc","doc","toString","stud_info","selected_answers","uid","quiz_title","name","class","roll_no","email_id","merge","href","concat","attemptPromise","Promise","res","rej","undefined","getDoc","data","settersCollectionRef","collection","docos","getDocs","docs","resolve","attemptChecker","docosData","map","index","id","getQuestions","f","React","createElement","className","type","placeholder","question","questionIndex","key","uuid","options","option","optionIndex","value","htmlFor","onClick","count","infoBool","getElementById","tempSelectedList","q","cnt","push","selectedAnswer","currentUser","alert","onSubmit","FormMaker","quizTitle","setQuizTitle","list","setList","answer","optionList","setOptionList","optionNo","questChangeHandler","event","where","values","target","opt","lis","validator","question_question","answer_answer","j","examPin","Math","floor","random","creator","setQuestionPaper","setAnswerSheet","setResponseStatus","onChange","soloList","src","require","alt","valuess","filter","item","itemIndex","optValues","splice","handleRemoveQuest","soloOption","ind","ii","optionChangeHandler","handleRemoveOpt","onKeyPress","pattern","RegExp","match","preventDefault","numHandler","min","max","maxLength","handleAddOpt","handleAddQuest","confirm","PinVerify","setPin","pinChangeHandler","Navbar","funct","classList","add","remove","activeHighlighter","URL","Fragment","readOnly","change","selectOptionClickHandler","currentTarget","selectedIndex","ResultFetch","answers","setAnswers","selectedAnswers","setSelectedAnswers","score","setScore","click","setClick","getAnswers","something","exists","getSelectedAnswers","parseInt","prevScore","DisplayPin","navigator","clipboard","writeText","ExamsCreated","createdExams","setCreatedExams","examPins","setExamPins","somo","prevCreatedExams","prevExamPins","prevStatus","exam","checkResponses","soloStatus","stat","handleResponseStatus","history","back","ExamsAttempted","examAttempts","setExamAttempts","prevExamAttempts","attempt","DisplayResponses","somesome","prevStudInfo","stu","Home","setUser","About","App","onscroll","scrollY","BrowserRouter","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c6058815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash_bin-100_copy.9c27863c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pngwing.com (1).9ccdcf8a.png\";","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore/lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyASSQtbIIzCV1IxhrVyTvuafEfEdNdAtcY\",\r\n  authDomain: \"scenic-sphere-339705.firebaseapp.com\",\r\n  projectId: \"scenic-sphere-339705\",\r\n  storageBucket: \"scenic-sphere-339705.appspot.com\",\r\n  messagingSenderId: \"11120779697\",\r\n  appId: \"1:11120779697:web:5d5d36c72d8e97732ddd90\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nexport const auth = getAuth(app);\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nexport function Stater() {\r\n  const [authState, setAuthState] = useState();\r\n\r\n  useEffect(() => {\r\n    document.querySelector(\".sign\").innerHTML = \"Loading...\";\r\n    getAuth().onAuthStateChanged((user) => {\r\n      let some = document.querySelectorAll('[class*=\"logged\"]');\r\n      if (user) {\r\n        document.querySelector(\".sign\").style.display = \"none\";\r\n        for (let i = 0; i < some.length; i++) {\r\n          // some[i].classList.remove(\"displayNoner\");\r\n          // some[i].classList.add(\"displayUnsetter\");\r\n          some[i].style.display = \"unset\";\r\n        }\r\n        document.querySelector(\"#displayName\").innerHTML = user.displayName;\r\n        //console.log(user.displayName);\r\n      } else {\r\n        document.querySelector(\".sign\").style.display = \"\";\r\n        for (let i = 0; i < some.length; i++) {\r\n          some[i].style.display = \"none\";\r\n        }\r\n        document.querySelector(\".sign\").innerHTML = `<a>Login</a>`;\r\n      }\r\n    });\r\n    // document.querySelector(\".sign\").innerHTML = authState;\r\n  }, [authState]);\r\n\r\n  this.signInWithGoogle = () => {\r\n    signInWithPopup(getAuth(), provider)\r\n      .then((result) => {\r\n        const credential = GoogleAuthProvider.credentialFromResult(result);\r\n        setAuthState();\r\n      })\r\n      .catch((error) => {\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        const email = error.email;\r\n        const credential = GoogleAuthProvider.credentialFromError(error);\r\n      });\r\n  };\r\n\r\n  this.signOutWithGoogle = () => {\r\n    getAuth()\r\n      .signOut()\r\n      .then(() => {\r\n        setAuthState();\r\n        window.location = \"/\";\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n}\r\n\r\nexport default db;\r\n","import { useEffect, useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"../../services/firebaseConfig\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  setDoc,\r\n} from \"firebase/firestore/lite\";\r\n\r\nfunction Form() {\r\n  const [questions, setQuestions] = useState(() => []);\r\n  // const [options, setOptions] = useState(() => [{}]);\r\n  const [title, setTitle] = useState();\r\n  const [selectedList, setSelectedList] = useState(() => [{}]);\r\n  const [studInfo, setStudInfo] = useState(() => {});\r\n  const [status, setStatus] = useState(() => \"\");\r\n\r\n  let { pin } = useParams();\r\n\r\n  useEffect(() => {\r\n    async function f() {\r\n      // console.log(Object.keys(selectedList[0]).length);\r\n      if (Object.keys(selectedList[0]).length !== 0) {\r\n        // console.log(studInfo);\r\n        await setDoc(\r\n          doc(\r\n            db,\r\n            \"Paper_Setters\",\r\n            pin.toString(),\r\n            \"Responses\",\r\n            studInfo[\"email\"]\r\n          ),\r\n          {\r\n            stud_info: studInfo,\r\n            selected_answers: selectedList,\r\n          }\r\n        );\r\n        getAuth().onAuthStateChanged(async function (user) {\r\n          if (user) {\r\n            await setDoc(\r\n              doc(db, \"Users\", user.uid, \"Exams_Attempted\", pin),\r\n              {\r\n                quiz_title: title,\r\n                name: studInfo[\"name\"],\r\n                class: studInfo[\"class\"],\r\n                roll_no: studInfo[\"roll_no\"],\r\n                email_id: studInfo[\"email\"],\r\n              },\r\n              { merge: true }\r\n            );\r\n          } else {\r\n            console.log(\"Something Went Wrong!\");\r\n          }\r\n        });\r\n\r\n        window.location.href += `/ResultFetch/${studInfo[\"email\"]}`;\r\n      } else {\r\n        //console.log(\"Jhol\");\r\n      }\r\n\r\n      const attemptPromise = new Promise((res, rej) => {\r\n        getAuth().onAuthStateChanged(async function (user) {\r\n          if (user) {\r\n            const check = await getDoc(\r\n              doc(db, \"Users\", user.uid, \"Exams_Attempted\", pin)\r\n            );\r\n            // console.log(check.data());\r\n            if (check.data() === undefined) {\r\n              //console.log(\"Not Attempted\");\r\n              res(false);\r\n            } else {\r\n              //console.log(\"Already Attempted\");\r\n              res(true);\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      async function attemptChecker() {\r\n        let some = await Promise.resolve(attemptPromise);\r\n        //console.log(some);\r\n        return some;\r\n      }\r\n\r\n      // async function statusChecker() {\r\n\r\n      // }\r\n\r\n      const getQuestions = async () => {\r\n        //function to get Question Paper\r\n        const settersCollectionRef = collection(\r\n          //Path to Question Papers Collection\r\n          db,\r\n          \"Paper_Setters\",\r\n          pin.toString(),\r\n          \"Question_Papers_MCQ\"\r\n        );\r\n        const docos = await getDocs(settersCollectionRef); //Getting all documents inside Question Papers Collection\r\n        if (Object.keys(docos.docs).length !== 0) {\r\n          //checks whether the Question Papers collection is empty\r\n          // console.log(await attemptChecker());\r\n          if ((await attemptChecker()) === true) {\r\n            //calls attemptChecker() which checks if the user has already attempted the exam\r\n            setQuestions(\"Already Attempted\");\r\n          } else {\r\n            const docosData = docos.docs.map((docs, index) => {\r\n              if (index === 0) {\r\n                //checks index === 0 because the question paper always gets stored as the first document in the Question Papers collection\r\n                setTitle(docs.id); //sets Quiz Title\r\n              }\r\n              return docs.data(); //returns question paper\r\n            });\r\n            setQuestions(docosData[0][\"question_question\"].map((doc) => doc)); //sets question paper\r\n            setStatus(docosData[0][\"status\"]); //sets status already attempted or appearing for the first time\r\n          }\r\n        } else {\r\n          setQuestions(\"Incorrect Pin\"); //if Question Papers collection is empty\r\n        }\r\n      };\r\n\r\n      getQuestions();\r\n    }\r\n    f();\r\n  }, [selectedList, pin, studInfo]);\r\n\r\n  useEffect(() => {\r\n    //console.log(questions.length);\r\n  }, [questions]);\r\n\r\n  function onSubmit() {\r\n    // setSelectedList([]);\r\n    let count = 0;\r\n    //console.log(\"Submitted\");\r\n    let infoBool = false;\r\n\r\n    if (\r\n      document.getElementById(\"studName\").value !== \"\" &&\r\n      document.getElementById(\"studRollNo\").value !== \"\" &&\r\n      document.getElementById(\"studClass\").value !== \"\"\r\n    ) {\r\n      infoBool = true;\r\n    }\r\n    // console.log(count);\r\n\r\n    for (let i = 0; i < questions.length; i++) {\r\n      if (\r\n        document.querySelector(\r\n          `input[name=\"${i + 1}. ${questions[i].question}\"]:checked`\r\n        ) != null\r\n      ) {\r\n        count++;\r\n        //console.log(count + \" = \" + questions.length);\r\n        if (count === questions.length && infoBool) {\r\n          let tempSelectedList = [];\r\n          questions.map((q, cnt) =>\r\n            tempSelectedList.push({\r\n              selectedAnswer: document.querySelector(\r\n                `input[name=\"${cnt + 1}. ${questions[cnt].question}\"]:checked`\r\n              ).value,\r\n            })\r\n          );\r\n          setSelectedList(tempSelectedList);\r\n          setStudInfo({\r\n            name: document.getElementById(\"studName\").value,\r\n            email: getAuth().currentUser.email,\r\n            roll_no: document.getElementById(\"studRollNo\").value,\r\n            class: document.getElementById(\"studClass\").value,\r\n          });\r\n        } else {\r\n          // handle incomplete response\r\n          //alert(\"Incomplete\");\r\n        }\r\n      }\r\n      if (i === questions.length - 1) {\r\n        if (!infoBool && count < questions.length) {\r\n          alert(\"Please Enter Student Details and Attempt All Questions\");\r\n        } else if (count < questions.length) {\r\n          alert(\"Please Attempt All Questions\");\r\n        } else if (!infoBool) {\r\n          alert(\"Please Enter Student Details\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form id=\"mainForm\">\r\n      {questions.length !== 0 ? (\r\n        questions !== \"Incorrect Pin\" ? (\r\n          questions !== \"Already Attempted\" ? (\r\n            status !== \"inactive\" ? (\r\n              <div>\r\n                <div className=\"quizBox\">\r\n                  <p id=\"quiz_title\" className=\"faintShadow\">\r\n                    {title}\r\n                  </p>\r\n                </div>\r\n                <ul className=\"stu_info\">\r\n                  <li>\r\n                    Name:{\" \"}\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"studName\"\r\n                      className=\"studInfo faintShadow\"\r\n                      placeholder=\"Enter Name\"\r\n                    ></input>\r\n                  </li>\r\n                  <li>\r\n                    Roll No:{\" \"}\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"studRollNo\"\r\n                      className=\"studInfo faintShadow\"\r\n                      placeholder=\"Enter Roll Number\"\r\n                    ></input>\r\n                  </li>\r\n                  <li>\r\n                    Class:{\" \"}\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"studClass\"\r\n                      className=\"studInfo faintShadow\"\r\n                      placeholder=\"Enter Class\"\r\n                    ></input>\r\n                  </li>\r\n                </ul>\r\n                {questions.map((question, questionIndex) => {\r\n                  // console.log(question);\r\n                  return (\r\n                    <div key={uuid()}>\r\n                      <p className=\"questionP\">\r\n                        {\" \"}\r\n                        {questionIndex + 1}. {question.question}\r\n                      </p>\r\n                      {question.options.map((option, optionIndex) => {\r\n                        // console.log(option);\r\n                        // return <p key={uuid()}>{option[\"option\"]}</p>;\r\n                        return (\r\n                          <div key={uuid()}>\r\n                            <li key={uuid()} className=\"radioButtonsLi\">\r\n                              <input\r\n                                key={uuid()}\r\n                                id={\r\n                                  questionIndex.toString() +\r\n                                  optionIndex.toString()\r\n                                }\r\n                                type=\"radio\"\r\n                                className=\"radioInput\"\r\n                                value={optionIndex + 1}\r\n                                name={`${questionIndex + 1}. ${\r\n                                  question.question\r\n                                }`}\r\n                              />\r\n\r\n                              <label\r\n                                className=\"radioLabel faintShadow hov\"\r\n                                htmlFor={\r\n                                  questionIndex.toString() +\r\n                                  optionIndex.toString()\r\n                                }\r\n                              >\r\n                                {option[\"option\"]}\r\n                              </label>\r\n                            </li>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <div className=\"sub_btn\">\r\n                  <input\r\n                    className=\"sub_btn_actual hov\"\r\n                    type=\"button\"\r\n                    value=\"Submit\"\r\n                    onClick={() => onSubmit()}\r\n                  />\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <p className=\"centeredP\">Creator has closed the responses!</p>\r\n            )\r\n          ) : (\r\n            <p className=\"centeredP\">You have already attempted this exam!</p>\r\n          )\r\n        ) : (\r\n          <p className=\"centeredP\">Incorrect Pin</p>\r\n        )\r\n      ) : (\r\n        <p className=\"centeredP\">Loading...</p>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import { useEffect, useState } from \"react\";\r\nimport db from \"../../services/firebaseConfig\";\r\nimport { doc, setDoc } from \"firebase/firestore/lite\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction FormMaker() {\r\n  const [quizTitle, setQuizTitle] = useState(\"\");\r\n  const [list, setList] = useState([\r\n    { id: uuid(), question: \"\", answer: null },\r\n  ]);\r\n  const [optionList, setOptionList] = useState([\r\n    [\r\n      { id: uuid(), option: \"\", optionNo: 1 },\r\n      { id: uuid(), option: \"\", optionNo: 2 },\r\n    ],\r\n  ]);\r\n\r\n  useEffect(() => {}, [optionList]);\r\n\r\n  function numHandler(event, index) {\r\n    let pattern = new RegExp(\"[^0-\" + optionList[index].length + \"]\");\r\n    if (event.key.match(pattern) || event.target.value.length >= 1) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  function handleAddQuest() {\r\n    // console.log(list);\r\n    // console.log(Math.floor(100000 + Math.random() * 999999));\r\n    let values = [...optionList];\r\n    values.push([\r\n      { id: uuid(), option: \"\", optionNo: 1 },\r\n      { id: uuid(), option: \"\", optionNo: 2 },\r\n    ]);\r\n    setOptionList(values);\r\n    setList([...list, { id: uuid(), question: \"\", answer: null }]);\r\n  }\r\n\r\n  function handleRemoveQuest(index) {\r\n    let values = [...list];\r\n    let valuess = values.filter((item, itemIndex) => itemIndex !== index);\r\n    let optValues = [...optionList];\r\n    //console.log(optValues);\r\n    optValues.splice(index, 1);\r\n    //console.log(optValues);\r\n    setOptionList(optValues);\r\n    setList(valuess);\r\n  }\r\n\r\n  function handleAddOpt(index, ind) {\r\n    let values = [...optionList];\r\n    values[index].push({\r\n      id: uuid(),\r\n      option: \"\",\r\n      optionNo: ind,\r\n    });\r\n    setOptionList(values);\r\n  }\r\n\r\n  function handleRemoveOpt(i, ii) {\r\n    let values = [...optionList];\r\n    //console.log(values);\r\n    values[i].splice(ii, 1);\r\n    //console.log(values);\r\n    setOptionList(values);\r\n  }\r\n\r\n  function questChangeHandler(event, i, where) {\r\n    let values = [...list];\r\n    values[i][where] = event.target.value;\r\n    setList(values);\r\n    // console.log(list);\r\n  }\r\n\r\n  function optionChangeHandler(event, i, ii) {\r\n    let values = [...optionList];\r\n    values[i][ii][\"option\"] = event.target.value;\r\n    setOptionList(values);\r\n    // console.log(optionList);\r\n  }\r\n\r\n  function validator() {\r\n    //Function to validate all the input fields of the page\r\n    let options = true; //Boolean value for options\r\n    let questions = true; //Boolean value for questions\r\n    optionList.map((option) => {\r\n      //Mapping through the useState optionList that gets updated onchange of any option input field\r\n      option.map((opt) => {\r\n        if (opt[\"option\"] === \"\") {\r\n          //Checking if option input field contains an empty string\r\n          questions = false;\r\n        }\r\n      });\r\n    });\r\n    list.map((lis) => {\r\n      //Mapping through the useState optionList that gets updated onchange of any question input field\r\n      if (\r\n        lis[\"answer\"] === \"\" || //Checking if answer input field contains an empty string\r\n        lis[\"answer\"] === null || //Checking if answer input field contains null\r\n        lis[\"question\"] == \"\" //Checking if question input field contains an empty string\r\n      ) {\r\n        options = false;\r\n      }\r\n    });\r\n    return options && questions; //Will return true ONLY when both options and questions boolean values are true\r\n  }\r\n\r\n  async function setQuestionPaper(examPin, quizTitle, question_question) {\r\n    //examPin: Randomly generated exam pin\r\n    //quizTitle: User input title of quiz\r\n    //question_question: Array of user input questions\r\n    await setDoc(\r\n      //Firestore document path for setting question paper\r\n      doc(\r\n        db,\r\n        \"Paper_Setters\",\r\n        examPin.toString(),\r\n        \"Question_Papers_MCQ\",\r\n        quizTitle\r\n      ),\r\n      //Data format for setting question paper\r\n      {\r\n        question_question: question_question,\r\n        creator: getAuth().currentUser.email,\r\n        status: \"active\",\r\n      }\r\n\r\n    );\r\n  }\r\n\r\n  async function setAnswerSheet(examPin, quizTitle, answer_answer) {\r\n    //examPin: Randomly generated exam pin\r\n    //quizTitle: User input title of quiz\r\n    //answer_answer: Array of user input answer keys\r\n    await setDoc(\r\n      //Firestore document path for setting answer key\r\n      doc(\r\n        db,\r\n        \"Paper_Setters\",\r\n        examPin.toString(),\r\n        \"Question_Papers_MCQ\",\r\n        quizTitle + \"_answerSheet\"\r\n      ),\r\n      //Data format for setting answer key\r\n      { answer_answer: answer_answer }\r\n    );\r\n  }\r\n\r\n  async function setResponseStatus(examPin, quizTitle) {\r\n    //examPin: Randomly generated exam pin\r\n    //quizTitle: User input title of quiz\r\n    await setDoc(\r\n      //Firestore document path for setting Response Status\r\n      doc(\r\n        db,\r\n        \"Users\",\r\n        getAuth().currentUser.uid,\r\n        \"Exams_Created\",\r\n        examPin.toString()\r\n      ),\r\n      //Data format for setting Status\r\n      {\r\n        quiz_title: quizTitle,\r\n        status: \"active\",\r\n      },\r\n      { merge: true }\r\n    );\r\n  }\r\n\r\n  async function onSubmit() {\r\n    let val = validator();\r\n    if (val) {\r\n      let question_question = [];\r\n      let answer_answer = [];\r\n      for (let i = 0; i < list.length; i++) {\r\n        question_question.push({\r\n          question: list[i][\"question\"],\r\n          options: [],\r\n        });\r\n        answer_answer.push({\r\n          answer: list[i][\"answer\"],\r\n        });\r\n        for (let j = 0; j < optionList[i].length; j++) {\r\n          // console.log(optionList[i][j][\"optionNo\"]);\r\n          question_question[i][\"options\"].push({\r\n            optionNo: optionList[i][j][\"optionNo\"],\r\n            option: optionList[i][j][\"option\"],\r\n          });\r\n        }\r\n      }\r\n      //Randomly generated exam pin\r\n      let examPin = Math.floor(100000 + Math.random() * 900000);\r\n      await setQuestionPaper(examPin, quizTitle, question_question);\r\n      await setAnswerSheet(examPin, quizTitle, answer_answer);\r\n      await setResponseStatus(examPin, quizTitle);\r\n      window.location.href += `/DisplayPin/${examPin}`;\r\n    } else {\r\n      alert(\"Please fill all the textfields to proceed\");\r\n    }\r\n  }\r\n  //alert(\"Test Created Successfully\");\r\n\r\n\r\n  function resetForm() {\r\n    if (window.confirm(\"Are you sure you want to clear the form ?\") == true) {\r\n      document.getElementById(\"quiz_title\").value = \"\";\r\n      setList([{ id: uuid(), question: \"\", answer: null }]);\r\n      setOptionList([\r\n        [\r\n          { id: uuid(), option: \"\", optionNo: 1 },\r\n          { id: uuid(), option: \"\", optionNo: 2 },\r\n        ],\r\n      ]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"mainForm\">\r\n      <div className=\"quizBox\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"faintShadow\"\r\n          name=\"quiz_title\"\r\n          id=\"quiz_title\"\r\n          placeholder=\"Quiz Title\"\r\n          onChange={(event) => setQuizTitle(event.target.value)}\r\n        />\r\n      </div>\r\n      {list.map((soloList, index) => (\r\n        <div key={soloList.id} id=\"questionnaire\">\r\n          <ul>\r\n            <li className=\"dlt_li\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder={`Question ${index + 1}`}\r\n                className=\"questionBox faintShadow\"\r\n                onChange={(event) =>\r\n                  questChangeHandler(event, index, \"question\")\r\n                }\r\n              />\r\n              {list.length > 1 && index !== 0 && (\r\n                <button className=\"dlt_btn\">\r\n                  <img\r\n                    className=\"dlt_img faintShadow\"\r\n                    src={require(\"../../images/trash_bin-100_copy.jpg\")}\r\n                    alt=\"Delete\"\r\n                    onClick={() => handleRemoveQuest(index)}\r\n                  />\r\n                </button>\r\n              )}\r\n            </li>\r\n\r\n            {optionList[index].map((soloOption, ind) => (\r\n              <li key={soloOption.id} className=\"dlt_li\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"optionBox faintShadow\"\r\n                  placeholder={`Option ${ind + 1}`}\r\n                  onChange={(event) => optionChangeHandler(event, index, ind)}\r\n                />\r\n                {optionList[index].length > 2 && ind !== 0 && ind !== 1 && (\r\n                  <button className=\"dlt_btn opt\">\r\n                    <img\r\n                      className=\"dlt_img opt faintShadow\"\r\n                      src={require(\"../../images/trash_bin-100_copy.jpg\")}\r\n                      alt=\"Delete\"\r\n                      onClick={() => handleRemoveOpt(index, ind)}\r\n                    />\r\n                  </button>\r\n                )}\r\n              </li>\r\n            ))}\r\n\r\n            <li>\r\n              <input\r\n                type=\"number\"\r\n                onKeyPress={(event) => numHandler(event, index)}\r\n                min=\"1\"\r\n                className=\"optionBox faintShadow\"\r\n                max={optionList[index].length}\r\n                maxLength=\"1\"\r\n                placeholder={`Correct Option`}\r\n                onChange={(event) => questChangeHandler(event, index, \"answer\")}\r\n              />\r\n            </li>\r\n            <li>\r\n              {optionList[index].length < 6 && (\r\n                <input\r\n                  className=\"sub_btn_actual hov\"\r\n                  type=\"button\"\r\n                  value=\"Add Option\"\r\n                  onClick={() =>\r\n                    handleAddOpt(index, optionList[index].length + 1)\r\n                  }\r\n                />\r\n              )}\r\n            </li>\r\n            {list.length - 1 === index && (\r\n              <input\r\n                className=\"sub_btn_actual hov\"\r\n                type=\"button\"\r\n                value=\"Add Question\"\r\n                onClick={() => handleAddQuest()}\r\n              />\r\n            )}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n      <div className=\"sub_btn\">\r\n        <input\r\n          className=\"sub_btn_actual hov\"\r\n          type=\"button\"\r\n          value=\"Submit\"\r\n          onClick={() => onSubmit()}\r\n        />\r\n        <input\r\n          className=\"sub_btn_actual hov\"\r\n          type=\"reset\"\r\n          value=\"Clear\"\r\n          onClick={() => resetForm()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormMaker;\r\n","import { useState } from \"react\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction PinVerify() {\r\n  const [pin, setPin] = useState(() => 0);\r\n\r\n  function numHandler(event) {\r\n    let pattern = /[^0-9]/;\r\n    if (event.key.match(pattern) || event.target.value.length >= 6) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  function routeChange() {\r\n    pin.length === 6\r\n      ? (window.location.href += `/Form/${pin}`)\r\n      : alert(\"Please enter a 6 digit pin\");\r\n    // <Link to={`/Form`}></Link>;\r\n  }\r\n\r\n  function pinChangeHandler(event) {\r\n    setPin(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div id=\"mainForm\">\r\n      <div className=\"quizBox\">\r\n        <input\r\n          type=\"number\"\r\n          className=\"faintShadow\"\r\n          name=\"pinCheck\"\r\n          id=\"pinCheck\"\r\n          placeholder=\"Enter Exam Pin\"\r\n          onKeyPress={(event) => numHandler(event)}\r\n          onChange={(event) => pinChangeHandler(event)}\r\n        />\r\n      </div>\r\n      <div className=\"sub_btn\">\r\n        <input\r\n          className=\"sub_btn_actual faintShadow hov\"\r\n          type=\"button\"\r\n          value=\"Submit\"\r\n          onClick={() => routeChange()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PinVerify;\r\n","import React, { useEffect } from \"react\";\nimport { Stater } from \"../../services/firebaseConfig\";\n\nconst Navbar = () => {\n  const funct = new Stater();\n\n  function selectOptionClickHandler(index) {\n    switch (index) {\n      case 1:\n        window.location = `/ExamsAttempted`;\n        break;\n      case 2:\n        window.location = `/ExamsCreated`;\n        break;\n      case 3:\n        funct.signOutWithGoogle();\n        break;\n    }\n  }\n\n  useEffect(() => {\n    //console.log(document.URL);\n    activeHighlighter();\n  }, [document.URL]);\n\n  function activeHighlighter() {\n    //console.log(\"Milkha\");\n    let some = document.querySelectorAll(\".NavLink > a\");\n    //console.log(some.length);\n    for (let i = 0; i < some.length; i++) {\n      // console.log(window.location.href);\n      // console.log(some[i].href);\n      if (window.location.href === some[i].href) {\n        some[i].classList.add(\"active\");\n      } else {\n        some[i].classList.remove(\"active\");\n      }\n    }\n  }\n\n  return (\n    <>\n      <div className=\"Nav faintShadow\">\n        <ul className=\"navUl\">\n          <li className=\"NavLink\">\n            <a href=\"/\">Home</a>\n          </li>\n          {/* <li className=\"NavLink\">\n            <a href=\"/About\">About</a>\n          </li> */}\n          <li className=\"NavLink logged\">\n            <a href=\"/FormMaker\">Create Exam</a>\n          </li>\n          <li className=\"NavLink logged\">\n            <a href=\"/pinverify\">Start Exam</a>\n          </li>\n          <li className=\"sign\" onClick={() => funct.signInWithGoogle()}></li>\n        </ul>\n        <select\n          className=\"profile logged\"\n          value=\"DEFAULT\"\n          readOnly\n          onChange={(change) =>\n            selectOptionClickHandler(change.currentTarget.selectedIndex)\n          }\n        >\n          <option\n            className=\"logOptions\"\n            id=\"displayName\"\n            value=\"DEFAULT\"\n          ></option>\n          <option\n            className=\"logOptions\"\n            id=\"previousExams\"\n            value=\"previousExams\"\n            onClick={() => (window.location = `/ExamsAttempted`)}\n          >\n            Exams Attempted\n          </option>\n          <option\n            className=\"logOptions\"\n            id=\"conductedExams\"\n            value=\"conductedExams\"\n            onClick={() => (window.location = `/ExamsCreated`)}\n          >\n            Exams Created\n          </option>\n          <option\n            className=\"logOptions\"\n            id=\"select\"\n            value=\"Logout\"\n            onClick={() => funct.signOutWithGoogle()}\n          >\n            Logout\n          </option>\n        </select>\n      </div>\n    </>\n  );\n};\n\nexport default Navbar;\n","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  getDoc,\r\n  doc,\r\n  setDoc,\r\n} from \"firebase/firestore/lite\";\r\nimport db from \"../../services/firebaseConfig\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nfunction ResultFetch() {\r\n  let { pin } = useParams();\r\n  let { email } = useParams();\r\n  const [answers, setAnswers] = useState(() => []);\r\n  const [selectedAnswers, setSelectedAnswers] = useState(() => []);\r\n  const [score, setScore] = useState(0);\r\n  const [studInfo, setStudInfo] = useState(() => []);\r\n  const [click, setClick] = useState(false);\r\n\r\n  useEffect(async () => {\r\n    const getAnswers = async () => {\r\n      const settersCollectionRef = collection(\r\n        db,\r\n        \"Paper_Setters\",\r\n        pin.toString(),\r\n        \"Question_Papers_MCQ\"\r\n      );\r\n      const docos = await getDocs(settersCollectionRef);\r\n      const docosData = docos.docs.map((docs) => docs.data());\r\n      setAnswers(docosData[1][\"answer_answer\"].map((doc) => doc));\r\n    };\r\n\r\n    const getSelectedAnswers = async () => {\r\n      await getDoc(\r\n        doc(db, \"Paper_Setters\", pin.toString(), \"Responses\", email)\r\n      ).then((something) => {\r\n        // setSelectedAnswers([something.data()]);\r\n        if (something.exists) {\r\n          setSelectedAnswers(something.data()[\"selected_answers\"]);\r\n          setStudInfo(something.data()[\"stud_info\"]);\r\n          //   console.log();\r\n        } else {\r\n          alert(\"Please enter all details\");\r\n          //console.log(\"jhol\");\r\n        }\r\n      });\r\n    };\r\n\r\n    await getAnswers();\r\n    await getSelectedAnswers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setScore(0);\r\n    for (let i = 0; i < answers.length; i++) {\r\n      if (\r\n        parseInt(answers[i][\"answer\"]) ===\r\n        parseInt(selectedAnswers[i][\"selectedAnswer\"])\r\n      ) {\r\n        setScore((prevScore) => prevScore + 1);\r\n      }\r\n    }\r\n  }, [selectedAnswers]);\r\n\r\n  useEffect(() => {\r\n    getAuth().onAuthStateChanged(function (user) {\r\n      if (user) {\r\n        setDoc(\r\n          doc(db, \"Users\", user.uid, \"Exams_Attempted\", pin),\r\n          {\r\n            score: `${score}/${answers.length}`,\r\n          },\r\n          { merge: true }\r\n        );\r\n        setDoc(\r\n          doc(db, \"Paper_Setters\", pin, \"Responses\", user.email),\r\n          {\r\n            score: `${score}/${answers.length}`,\r\n          },\r\n          { merge: true }\r\n        );\r\n      } else {\r\n        console.log(\"Something Went Wrong!\");\r\n      }\r\n    });\r\n  }, [score,answers]);\r\n\r\n  return (\r\n    <div id=\"mainForm\">\r\n      <p className=\"centeredP\">Test Submitted Successfully</p>\r\n      <div className=\"sub_btn\">\r\n        <input\r\n          className=\"sub_btn_actual hov\"\r\n          type=\"button\"\r\n          value=\"Get Result\"\r\n          onClick={() => setClick(true)}\r\n        />\r\n      </div>\r\n\r\n      {click && (\r\n        <div className=\"mainForm\">\r\n          <div className=\"centeredP\">\r\n            <table className=\"responsesTable\">\r\n              <tbody>\r\n                <tr className=\"thRow\">\r\n                  <th>Name</th>\r\n                  <th>Class</th>\r\n                  <th>Roll No</th>\r\n                  <th>Email</th>\r\n                  <th>Score</th>\r\n                </tr>\r\n              </tbody>\r\n              <tbody>\r\n                <tr className=\"tdRow\">\r\n                  <td>{studInfo[\"name\"]}</td>\r\n                  <td>{studInfo[\"class\"]}</td>\r\n                  <td>{studInfo[\"roll_no\"]}</td>\r\n                  <td>{studInfo[\"email\"]}</td>\r\n                  <td>\r\n                    {score}/{answers.length}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultFetch;\r\n","import { useParams } from \"react-router-dom\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction DisplayPin() {\r\n  let { pin } = useParams();\r\n\r\n  return (\r\n    <div id=\"mainForm\">\r\n      <p className=\"centeredP\">Test Created Successfully</p>\r\n      <p className=\"centeredP\" id=\"examPin\">\r\n        Your Exam Pin is&nbsp;<span> {pin}</span>{\" \"}\r\n      </p>\r\n\r\n      <div className=\"sub_btn\">\r\n        <input\r\n          className=\"sub_btn_actual hov\"\r\n          type=\"button\"\r\n          value=\"Copy To Clipboard\"\r\n          onClick={() => {\r\n            navigator.clipboard.writeText(pin);\r\n            alert(\"Copied Successfully\");\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayPin;\r\n","import React from 'react';\r\nimport {\r\n  collection,\r\n  getDoc,\r\n  getDocs,\r\n  doc,\r\n  setDoc,\r\n} from \"firebase/firestore/lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport db from \"../../services/firebaseConfig\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nfunction ExamsCreated() {\r\n  const [createdExams, setCreatedExams] = useState(() => []);\r\n  const [examPins, setExamPins] = useState(() => []);\r\n  const [status, setStatus] = useState(() => []);\r\n\r\n  useEffect(() => {\r\n    examSetter();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //console.log(status);\r\n  }, [status]);\r\n\r\n  function examSetter() {\r\n    getAuth().onAuthStateChanged(async function (user) {\r\n      if (user) {\r\n        const some = await getDocs(\r\n          collection(db, \"Users\", user.uid, \"Exams_Created\")\r\n        );\r\n        some.docs.length != 0\r\n          ? some.docs.map((doc) => {\r\n              let somo = doc.data();\r\n              setCreatedExams((prevCreatedExams) => [\r\n                ...prevCreatedExams,\r\n                somo,\r\n              ]);\r\n              setExamPins((prevExamPins) => [...prevExamPins, doc.id]);\r\n              setStatus((prevStatus) => [...prevStatus, somo[\"status\"]]);\r\n            })\r\n          : setCreatedExams([\"Empty\"]);\r\n      } else {\r\n        console.log(\"Something Went Wrong!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  async function checkResponses(index) {\r\n    window.location = `ExamsCreated/DisplayResponses/${examPins[index]}`;\r\n  }\r\n\r\n  async function handleResponseStatus(soloStatus, index) {\r\n    getAuth().onAuthStateChanged(async function (user) {\r\n      if (user) {\r\n        if (soloStatus === \"active\") {\r\n          if (\r\n            window.confirm(\"Are you sure you want to stop responses ?\") === true\r\n          ) {\r\n            await setDoc(\r\n              doc(\r\n                db,\r\n                \"Paper_Setters\",\r\n                examPins[index],\r\n                \"Question_Papers_MCQ\",\r\n                createdExams[index][\"quiz_title\"]\r\n              ),\r\n              {\r\n                status: \"inactive\",\r\n              },\r\n              { merge: true }\r\n            );\r\n\r\n            await setDoc(\r\n              doc(db, \"Users\", user.uid, \"Exams_Created\", examPins[index]),\r\n              { status: \"inactive\" },\r\n              { merge: true }\r\n            );\r\n\r\n            let stat = [...status];\r\n            stat[index] = \"inactive\";\r\n            setStatus(stat);\r\n          }\r\n        } else if (soloStatus === \"inactive\") {\r\n          if (\r\n            window.confirm(\"Are you sure you want to resume responses ?\") ===\r\n            true\r\n          ) {\r\n            await setDoc(\r\n              doc(\r\n                db,\r\n                \"Paper_Setters\",\r\n                examPins[index],\r\n                \"Question_Papers_MCQ\",\r\n                createdExams[index][\"quiz_title\"]\r\n              ),\r\n              {\r\n                status: \"active\",\r\n              },\r\n              { merge: true }\r\n            );\r\n\r\n            await setDoc(\r\n              doc(db, \"Users\", user.uid, \"Exams_Created\", examPins[index]),\r\n              { status: \"active\" },\r\n              { merge: true }\r\n            );\r\n\r\n            let stat = [...status];\r\n            stat[index] = \"active\";\r\n            setStatus(stat);\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"Something Went Wrong!\");\r\n      }\r\n    });\r\n    // console.log(createdExams[index][\"quiz_title\"]);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {createdExams.length != 0 ? (\r\n        createdExams[0] != \"Empty\" ? (\r\n          createdExams.map((exam, index) => (\r\n            <div className=\"mainForm\" key={uuid()}>\r\n              <p className=\"leftMargin\">Exam Title: {exam[\"quiz_title\"]}</p>\r\n              <p className=\"leftMargin\">Pin: {examPins[index]}</p>\r\n              <input\r\n                type=\"button\"\r\n                value=\"Check Responses\"\r\n                className=\"sub_btn_actual hov\"\r\n                onClick={() => checkResponses(index)}\r\n              />\r\n              <input\r\n                type=\"button\"\r\n                value={\r\n                  status[index] === \"active\"\r\n                    ? \"Stop Responses\"\r\n                    : \"Resume Responses\"\r\n                }\r\n                className=\"sub_btn_actual hov respo\"\r\n                onClick={() => handleResponseStatus(status[index], index)}\r\n              />\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"mainForm\">\r\n            <p className=\"centeredP\">No Exams Created Yet!</p>\r\n          </div>\r\n        )\r\n      ) : (\r\n        <div className=\"mainForm\">\r\n          <p className=\"centeredP\">Loading...</p>\r\n        </div>\r\n      )}\r\n      <div className=\"sub_btn\">\r\n        <input\r\n          className=\"sub_btn_actual hov\"\r\n          type=\"button\"\r\n          value=\"Back\"\r\n          onClick={() => window.history.back()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExamsCreated;\r\n","import { collection, getDocs } from \"firebase/firestore/lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport db from \"../../services/firebaseConfig\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction ExamsAttempted() {\r\n  const [examAttempts, setExamAttempts] = useState(() => []);\r\n\r\n  useEffect(() => {\r\n    getAuth().onAuthStateChanged(async function (user) {\r\n      if (user) {\r\n        const some = await getDocs(\r\n          collection(db, \"Users\", user.uid, \"Exams_Attempted\")\r\n        );\r\n        // console.log(some.docs);\r\n        some.docs.length != 0\r\n          ? some.docs.map((doc) => {\r\n              setExamAttempts((prevExamAttempts) => [\r\n                ...prevExamAttempts,\r\n                doc.data(),\r\n              ]);\r\n              //   return doc.data();\r\n            })\r\n          : setExamAttempts([\"Empty\"]);\r\n        // console.log(somesome);\r\n      } else {\r\n        console.log(\"Something Went Wrong!\");\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //console.log(examAttempts);\r\n  }, [examAttempts]);\r\n\r\n  return (\r\n    <div>\r\n      {examAttempts.length != 0 ? (\r\n        examAttempts[0] != \"Empty\" ? (\r\n          examAttempts.map((attempt) => {\r\n            return (\r\n              <div className=\"mainForm\" key={uuid()}>\r\n                <div className=\"centeredP\">\r\n                  <table className=\"responsesTable\">\r\n                    <tbody>\r\n                      <tr className=\"thRow\">\r\n                        <th>Exam Title</th>\r\n                        <th>Name</th>\r\n                        <th>Class</th>\r\n                        <th>Roll No</th>\r\n                        <th>Email</th>\r\n                        <th>Score</th>\r\n                      </tr>\r\n                    </tbody>\r\n                    <tbody>\r\n                      <tr className=\"tdRow\">\r\n                        <td>{attempt[\"quiz_title\"]}</td>\r\n                        <td>{attempt[\"name\"]}</td>\r\n                        <td>{attempt[\"class\"]}</td>\r\n                        <td>{attempt[\"roll_no\"]}</td>\r\n                        <td>{attempt[\"email_id\"]}</td>\r\n                        <td>{attempt[\"score\"]}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <>\r\n            <div className=\"mainForm\">\r\n              <p className=\"centeredP\">No Exams Attempted Yet!</p>\r\n            </div>\r\n          </>\r\n        )\r\n      ) : (\r\n        <div className=\"mainForm\">\r\n          <p className=\"centeredP\">Loading...</p>\r\n        </div>\r\n      )}\r\n      <div className=\"sub_btn\">\r\n        <input\r\n          className=\"sub_btn_actual hov\"\r\n          type=\"button\"\r\n          value=\"Back\"\r\n          onClick={() => window.history.back()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExamsAttempted;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getDocs, collection } from \"firebase/firestore/lite\";\r\nimport db from \"../../services/firebaseConfig\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction DisplayResponses() {\r\n  let { pin } = useParams();\r\n  const [studInfo, setStudInfo] = useState(() => []);\r\n  const [score, setScore] = useState(() => []);\r\n  useEffect(() => {\r\n    getAuth().onAuthStateChanged(async function (user) {\r\n      if (user) {\r\n        const some = await getDocs(\r\n          collection(db, \"Paper_Setters\", pin, \"Responses\")\r\n        );\r\n        const somesome = some.docs.map((doc) => doc.data());\r\n        somesome.length != 0\r\n          ? somesome.map((some) => {\r\n              setScore((prevScore) => [...prevScore, some[\"score\"]]);\r\n              setStudInfo((prevStudInfo) => [\r\n                ...prevStudInfo,\r\n                some[\"stud_info\"],\r\n              ]);\r\n              return some;\r\n            })\r\n          : setStudInfo([\"Empty\"]);\r\n      } else {\r\n        console.log(\"Something Went Wrong!\");\r\n      }\r\n    });\r\n  }, [pin]);\r\n\r\n  useEffect(() => {\r\n    // console.log(score);\r\n    // console.log(studInfo);\r\n  }, [studInfo, score]);\r\n\r\n  return (\r\n    <div>\r\n      {studInfo.length != 0 ? (\r\n        studInfo[0] != \"Empty\" ? (\r\n          studInfo.map((stu, index) => {\r\n            // console.log(studInfo[0]);\r\n            return (\r\n              <div className=\"mainForm\" key={uuid()}>\r\n                <p className=\"leftMargin\">Student Information :</p>\r\n                <div className=\"centeredP\">\r\n                  <table className=\"responsesTable\">\r\n                    <tbody>\r\n                      <tr className=\"thRow\">\r\n                        <th>Name</th>\r\n                        <th>Class</th>\r\n                        <th>Roll No</th>\r\n                        <th>Email</th>\r\n                        <th>Score</th>\r\n                      </tr>\r\n                    </tbody>\r\n                    <tbody>\r\n                      <tr className=\"tdRow\">\r\n                        <td>{stu[\"name\"]}</td>\r\n                        <td>{stu[\"class\"]}</td>\r\n                        <td>{stu[\"roll_no\"]}</td>\r\n                        <td>{stu[\"email\"]}</td>\r\n                        <td>{score[index]}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <>\r\n            <div className=\"mainForm\">\r\n              <p className=\"centeredP\">No Responses Yet!</p>\r\n            </div>\r\n          </>\r\n        )\r\n      ) : (\r\n        <div className=\"mainForm\">\r\n          <p className=\"centeredP\">Loading...</p>\r\n        </div>\r\n      )}\r\n      <div className=\"sub_btn\">\r\n        <input\r\n          className=\"sub_btn_actual hov\"\r\n          type=\"button\"\r\n          value=\"Back\"\r\n          onClick={() => window.history.back()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayResponses;\r\n","import { getAuth } from \"firebase/auth\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Stater } from \"../services/firebaseConfig\";\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction Home() {\r\n  const [user, setUser] = useState(false);\r\n  const funct = new Stater();\r\n\r\n  useEffect(() => {\r\n    getAuth().onAuthStateChanged(function (user) {\r\n      if (user) {\r\n        // console.log(user);\r\n        setUser(true);\r\n      } else {\r\n        setUser(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {}, [user]);\r\n\r\n  return (\r\n    <div className=\"mainForm heroBack faintShadow\">\r\n      <img\r\n        className=\"hero\"\r\n        src={require(\"../images/pngwing.com (1).png\")}\r\n        alt=\"Hero Image\"\r\n      ></img>\r\n      <div className=\"heroTextBox midShadow centeredP\">\r\n        <ul>\r\n          <li>\r\n            <h1 className=\"heroText\">Exams Made Simpler</h1>\r\n          </li>\r\n          <li>\r\n            <p className=\"sideKickText\">\r\n              With Examinator, the process of giving and taking exams feels\r\n              seamless!\r\n            </p>\r\n          </li>\r\n          <li>\r\n            <p className=\"sideKickText\">\r\n              {user === true\r\n                ? \"Create your first exam below\"\r\n                : \"Login below to start exploring\"}\r\n            </p>\r\n          </li>\r\n          <li>\r\n            <input\r\n              type=\"button\"\r\n              value={user === true ? \"Create Exam\" : \"Login\"}\r\n              className=\"sub_btn_actual hov heroBtn\"\r\n              onClick={\r\n                user === true\r\n                  ? () => (window.location = \"/FormMaker\")\r\n                  : () => funct.signInWithGoogle()\r\n              }\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nfunction About() {\r\n  return <div className=\"mainForm\"></div>;\r\n}\r\n\r\nexport default About;\r\n","import \"./App.css\";\nimport Form from \"./components/Form/Form\";\nimport FormMaker from \"./components/Form/FormMaker\";\nimport PinVerify from \"./components/Form/PinVerify\";\nimport Navbar from \"./components/Form/Navbar\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport ResultFetch from \"./components/Form/ResultFetch\";\nimport DisplayPin from \"./components/Form/DisplayPin\";\nimport ExamsCreated from \"./components/Form/ExamsCreated\";\nimport ExamsAttempted from \"./components/Form/ExamsAttempted\";\nimport DisplayResponses from \"./components/Form/DisplayResponses\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport React from 'react';\nfunction App() {\n  window.onscroll = function () {\n    // console.log(window.scrollY);\n    if (window.scrollY > 20) {\n      document.querySelector(\".Nav\").classList.add(\"whiteBg\", \"faintShadow\");\n    } else {\n      document.querySelector(\".Nav\").classList.remove(\"whiteBg\", \"faintShadow\");\n    }\n  };\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />}></Route>\n          <Route path=\"/About\" element={<About />}></Route>\n          <Route path=\"/pinverify\" element={<PinVerify />}></Route>\n          <Route path=\"/pinverify/Form/:pin\" element={<Form />}></Route>\n          <Route path=\"/FormMaker\" element={<FormMaker />}></Route>\n          <Route\n            path=\"/FormMaker/DisplayPin/:pin\"\n            element={<DisplayPin />}\n          ></Route>\n          <Route\n            path=\"/pinverify/Form/:pin/ResultFetch/:email\"\n            element={<ResultFetch />}\n          ></Route>\n          <Route path=\"/ExamsCreated\" element={<ExamsCreated />}></Route>\n          <Route path=\"/ExamsAttempted\" element={<ExamsAttempted />}></Route>\n          <Route\n            path=\"/ExamsCreated/DisplayResponses/:pin\"\n            element={<DisplayResponses />}\n          ></Route>\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}